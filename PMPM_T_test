WITH max_date as (select max(month_date) as max_month_date from opa_cua_f_exec_summary) 

,cms as (select CASE WHEN  
    DATEDIFF('year',a.month_date,current_date) = 0   
    THEN 1 else 0 END as YTD_Current  
   ,CASE WHEN 
    DATEDIFF('year',a.month_date,current_date) = 1
    THEN 1 else 0 end as YTD_Prior
   ,CASE WHEN 
    DATEDIFF('month',a.month_date,(select max_month_date::date from max_date) ) BETWEEN 0 AND 11
         THEN 1 else 0 end as Roll_12_Curr
   ,CASE WHEN 
    DATEDIFF('month',a.month_date,(select max_month_date::date from max_date) ) BETWEEN 12 AND  23 
    THEN 1 else 0 END as Roll_12_Prior 
    ,CASE WHEN 
    DATEDIFF('month',a.month_date,current_date) BETWEEN 2 AND  7 
    THEN 1 else 0 END as JulDec2019
    ,CASE WHEN 
    DATEDIFF('month',a.month_date,'2019-12-01') BETWEEN 6 AND  12 
    THEN 1 else 0 END as JanJun2019 
        --,YEAR(month_date), MONTH(month_date), 
        , *, b.leakage_count as leakage_ct
        , a.plan_name as plan
        --,SUM(ed_visits)/SUM(member_months)*1000 as 'ED/1000'
        , a.month_date as date_month
        from opa_cua_f_exec_summary a
        LEFT JOIN opa_cua_f_exec_summary_leak b 
        ON a.payer_name = b.payer_name AND a.plan_name = b.plan_name AND a.month_date = b.month_date
        where a.payer_name = 'CMS'
        or a.payer_name = 'Univera')
   ,YTD_Curr as     
        (select  'YTD Current' as date_cat,
       month(date_month) as months,
                                plan as Assigned,
                                SUM(med_amount)/12 as TotalAmount,
                                SUM(cua_amount)/SUM(member_months)/12 as 'TotalPMPM',
                    SUM(ip_amount)/SUM(member_months)/12 as 'IPPMPM',
                    SUM(OP_amount)/SUM(member_months)/12 as 'OPPMPM',
                    SUM(Professional_amount)/SUM(member_months)/12 as 'ProfPMPM',
                    SUM(cua_amount - (ip_amount + op_amount + Professional_amount))/SUM(member_months)/12 as 'OtherPMPM',
                    SUM(member_months) as MemberMonths,
                                SUM(ed_visits)/SUM(member_months)*1000 as 'ED1000',
                    SUM(ed_amount)/SUM(ed_visits) as 'EDencountercost',
                    SUM(IP_visits)/SUM(member_months)*1000 as 'IP1000',
                    SUM(ip_amount)/SUM(ip_visits) as 'ipencountercost',
                    SUM(readmission_visits)/SUM(member_months)*1000 as 'readmissions1000',
                    SUM(readmission_amount)/SUM(readmission_visits) as 'readmitencountercost',
                    SUM(op_visits)/SUM(member_months)*1000 as 'Outpatient1000',
                    SUM(Rx_Scripts)/SUM(member_months)*1000 as 'Scripts1000',
                    SUM(mri_count)/SUM(member_months)*1000 as 'MRI1000',
                    SUM(mri_amount)/SUM(mri_count) as 'mriencountercost',
                    SUM(ct_count)/SUM(member_months)*1000 as 'CT1000',
                    SUM(ct_amount)/SUM(ct_count) as 'ctencountercost',
                    (SUM(leakage_amount)/SUM(total_paid_amount))*100 as 'Leakage'
                    from cms
                    where YTD_Current =1
        group by 1,2,3) 

     ,YTD_Prior as   (select 'YTD Prior' as date_cat,
     month(date_month) as months,
     plan as Assigned,
                     SUM(med_amount)/12 as TotalAmount,
                   SUM(cua_amount)/SUM(member_months)/12 as 'TotalPMPM',
                    SUM(ip_amount)/SUM(member_months)/12 as 'IPPMPM',
                    SUM(OP_amount)/SUM(member_months)/12 as 'OPPMPM',
                    SUM(Professional_amount)/SUM(member_months)/12 as 'ProfPMPM',
                    SUM(cua_amount - (ip_amount + op_amount + Professional_amount))/SUM(member_months)/12 as 'OtherPMPM',
                    SUM(member_months) as MemberMonths,
                                SUM(ed_visits)/SUM(member_months)*1000 as 'ED1000',
                    SUM(ed_amount)/SUM(ed_visits) as 'EDencountercost',
                    SUM(IP_visits)/SUM(member_months)*1000 as 'IP1000',
                    SUM(ip_amount)/SUM(ip_visits) as 'ipencountercost',
                    SUM(readmission_visits)/SUM(member_months)*1000 as 'readmissions1000',
                    SUM(readmission_amount)/SUM(readmission_visits) as 'readmitencountercost',
                    SUM(op_visits)/SUM(member_months)*1000 as 'Outpatient1000',
                    SUM(Rx_Scripts)/SUM(member_months)*1000 as 'Scripts1000',
                    SUM(mri_count)/SUM(member_months)*1000 as 'MRI1000',
                    SUM(mri_amount)/SUM(mri_count) as 'mriencountercost',
                    SUM(ct_count)/SUM(member_months)*1000 as 'CT1000',
                    SUM(ct_amount)/SUM(ct_count) as 'ctencountercost',
                    (SUM(leakage_amount)/SUM(total_paid_amount))*100 as 'Leakage'
                    from cms
                    where YTD_Prior =1
        group by 1,2,3)
              
      ,Roll_curr as  (select 'Rolling 12 Current' as date_cat,
      month(date_month) as months,
      plan as Assigned,
        SUM(med_amount)/12 as TotalAmount,
                    SUM(cua_amount)/SUM(member_months)/12 as 'TotalPMPM',
                    SUM(ip_amount)/SUM(member_months)/12 as 'IPPMPM',
                    SUM(OP_amount)/SUM(member_months)/12 as 'OPPMPM',
                    SUM(Professional_amount)/SUM(member_months)/12 as 'ProfPMPM',
                    SUM(cua_amount - (ip_amount + op_amount + Professional_amount))/SUM(member_months)/12 as 'OtherPMPM',
                    SUM(member_months) as MemberMonths,
                                SUM(ed_visits)/SUM(member_months)*1000 as 'ED1000',
                    SUM(ed_amount)/SUM(ed_visits) as 'EDencountercost',
                    SUM(IP_visits)/SUM(member_months)*1000 as 'IP1000',
                    SUM(ip_amount)/SUM(ip_visits) as 'ipencountercost',
                    SUM(readmission_visits)/SUM(member_months)*1000 as 'readmissions1000',
                    SUM(readmission_amount)/SUM(readmission_visits) as 'readmitencountercost',
                    SUM(op_visits)/SUM(member_months)*1000 as 'Outpatient1000',
                    SUM(Rx_Scripts)/SUM(member_months)*1000 as 'Scripts1000',
                    SUM(mri_count)/SUM(member_months)*1000 as 'MRI1000',
                    SUM(mri_amount)/SUM(mri_count) as 'mriencountercost',
                    SUM(ct_count)/SUM(member_months)*1000 as 'CT1000',
                    SUM(ct_amount)/SUM(ct_count) as 'ctencountercost',
                    (SUM(leakage_amount)/SUM(total_paid_amount))*100 as 'Leakage'
                    from cms
                    where Roll_12_Curr =1
        group by 1,2,3) 
    ,Roll_prior as (select 'Rolling 12 Prior' as date_cat,
    month(date_month) as months,
    plan as Assigned,
        SUM(med_amount)/12 as TotalAmount,
                    SUM(cua_amount)/SUM(member_months)/12 as 'TotalPMPM',
                    SUM(ip_amount)/SUM(member_months)/12 as 'IPPMPM',
                    SUM(OP_amount)/SUM(member_months)/12 as 'OPPMPM',
                    SUM(Professional_amount)/SUM(member_months)/12 as 'ProfPMPM',
                    SUM(cua_amount - (ip_amount + op_amount + Professional_amount))/SUM(member_months)/12 as 'OtherPMPM',
                    SUM(member_months) as MemberMonths,
                    SUM(ed_visits)/SUM(member_months)*1000 as 'ED1000',
                    SUM(ed_amount)/SUM(ed_visits) as 'EDencountercost',
                    SUM(IP_visits)/SUM(member_months)*1000 as 'IP1000',
                    SUM(ip_amount)/SUM(ip_visits) as 'ipencountercost',
                    SUM(readmission_visits)/SUM(member_months)*1000 as 'readmissions1000',
                    SUM(readmission_amount)/SUM(readmission_visits) as 'readmitencountercost',
                    SUM(op_visits)/SUM(member_months)*1000 as 'Outpatient1000',
                    SUM(Rx_Scripts)/SUM(member_months)*1000 as 'Scripts1000',
                    SUM(mri_count)/SUM(member_months)*1000 as 'MRI1000',
                    SUM(mri_amount)/SUM(mri_count) as 'mriencountercost',
                    SUM(ct_count)/SUM(member_months)*1000 as 'CT1000',
                    SUM(ct_amount)/SUM(ct_count) as 'ctencountercost',
                    (SUM(leakage_amount)/SUM(total_paid_amount))*100 as 'Leakage'
                    from cms
                    where Roll_12_Prior =1
        group by 1,2,3)
        

        
        , main as (
        select * from YTD_Curr UNION ALL
        select * from YTD_Prior UNION ALL
        select * from Roll_curr  UNION ALL
        select * from Roll_prior )
        
        , var as (
        select  
        assigned
        ,date_cat
        ------------T TESTS var ------------
        ---tot_pmpm
        ,avg(TotalPMPM) as avg_tot_pmpm
        ,stddev(totalPMPM) as std_tot_pmpm
        ,lag(avg(TotalPMPM),1) OVER (ORDER by assigned, date_cat) as lag_avg_tot_pmpm
        ,lag(stddev(totalPMPM),1) OVER (ORDER by assigned, date_cat) as lag_std_tot_pmpm
        ---ip_pmpm
        ,avg(IPPMPM) as avg_ip_pmpm
        ,stddev(IPPMPM) as std_ip_pmpm
        ,lag(avg(IPPMPM),1) OVER (ORDER by assigned, date_cat) as lag_avg_ip_pmpm
        ,lag(stddev(IPPMPM),1) OVER (ORDER by assigned, date_cat) as lag_std_ip_pmpm
        ---op_pmpm
        ,avg(OPPMPM) as avg_op_pmpm
        ,stddev(OPPMPM) as std_op_pmpm
        ,lag(avg(OPPMPM),1) OVER (ORDER by assigned, date_cat) as lag_avg_op_pmpm
        ,lag(stddev(OPPMPM),1) OVER (ORDER by assigned, date_cat) as lag_std_op_pmpm
        ---prof_pmpm
        ,avg(ProfPMPM) as avg_pro_pmpm
        ,stddev(ProfPMPM) as std_pro_pmpm
        ,lag(avg(ProfPMPM),1) OVER (ORDER by assigned, date_cat) as lag_avg_pro_pmpm
        ,lag(stddev(ProfPMPM),1) OVER (ORDER by assigned, date_cat) as lag_std_pro_pmpm
        ---other_pmpm
        ,avg(OtherPMPM) as avg_oth_pmpm
        ,stddev(OtherPMPM) as std_oth_pmpm
        ,lag(avg(OtherPMPM),1) OVER (ORDER by assigned, date_cat) as lag_avg_oth_pmpm
        ,lag(stddev(OtherPMPM),1) OVER (ORDER by assigned, date_cat) as lag_std_oth_pmpm
        ---ed_1000
        ,avg(ed1000) as avg_1000_ed
        ,stddev(ed1000) as std_1000_ed
        ,lag(avg(ed1000),1) OVER (ORDER by assigned, date_cat) as lag_avg_1000_ed
        ,lag(stddev(ed1000),1) OVER (ORDER by assigned, date_cat) as lag_std_1000_ed
        ---ip_1000
        ,avg(ip1000) as avg_1000_ip
        ,stddev(ip1000) as std_1000_ip
        ,lag(avg(ip1000),1) OVER (ORDER by assigned, date_cat) as lag_avg_1000_ip
        ,lag(stddev(ip1000),1) OVER (ORDER by assigned, date_cat) as lag_std_1000_ip
        ---read_1000
        ,avg(readmissions1000) as avg_1000_re
        ,stddev(readmissions1000) as std_1000_re
        ,lag(avg(readmissions1000),1) OVER (ORDER by assigned, date_cat) as lag_avg_1000_re
        ,lag(stddev(readmissions1000),1) OVER (ORDER by assigned, date_cat) as lag_std_1000_re
        ---mri_1000
        ,avg(MRI1000) as avg_1000_mri
        ,stddev(MRI1000) as std_1000_mri
        ,lag(avg(MRI1000),1) OVER (ORDER by assigned, date_cat) as lag_avg_1000_mri
        ,lag(stddev(MRI1000),1) OVER (ORDER by assigned, date_cat) as lag_std_1000_mri
         ---ct_1000
        ,avg(CT1000) as avg_1000_ct
        ,stddev(CT1000) as std_1000_ct
        ,lag(avg(CT1000),1) OVER (ORDER by assigned, date_cat) as lag_avg_1000_ct
        ,lag(stddev(CT1000),1) OVER (ORDER by assigned, date_cat) as lag_std_1000_ct
        
        
        ---extras for chart
        ,sum(membermonths) as member_months
        ,sum(totalamount) as total_amount
        ,avg(EDencountercost) as per_ed_charged_amt
        ,avg(ipencountercost) as per_ip_charged_amt
        ,avg(readmitencountercost) as per_read_charged_amt
        ,avg(mriencountercost) as per_mri_charged_amt
        ,avg(ctencountercost) as per_ct_charged_amt
        ,avg(leakage) as leakage
        
        ---sample size
        ,count(distinct months) as sample_size
        ,lag(count(distinct months),1) OVER (ORDER by assigned, date_cat) as lag_sample_size
        from main
        --where assigned = 'CMS MSSP Assigned'
        group by 1,2)
        
        -------t test calculation -----
        ,sig as (
        select 
        * 
        ,abs(avg_tot_pmpm - lag_avg_tot_pmpm) / sqrt(( ( (std_tot_pmpm^2) / sample_size ) + ( (lag_std_tot_pmpm^2) / lag_sample_size)     )) tot_pmpm_sig
        ,abs(avg_ip_pmpm - lag_avg_ip_pmpm) / sqrt(( ( (std_ip_pmpm^2) / sample_size ) + ( (lag_std_ip_pmpm^2) / lag_sample_size)     )) ip_pmpm_sig
        ,abs(avg_op_pmpm - lag_avg_op_pmpm) / sqrt(( ( (std_op_pmpm^2) / sample_size ) + ( (lag_std_op_pmpm^2) / lag_sample_size)     )) op_pmpm_sig
        ,abs(avg_pro_pmpm - lag_avg_pro_pmpm) / sqrt(( ( (std_pro_pmpm^2) / sample_size ) + ( (lag_std_pro_pmpm^2) / lag_sample_size)     )) pro_pmpm_sig
        ,abs(avg_oth_pmpm - lag_avg_oth_pmpm) / sqrt(( ( (std_oth_pmpm^2) / sample_size ) + ( (lag_std_oth_pmpm^2) / lag_sample_size)     )) oth_pmpm_sig
        ,abs(avg_1000_ed - lag_avg_1000_ed) / sqrt(( ( (std_1000_ed^2) / sample_size ) + ( (lag_std_1000_ed^2) / lag_sample_size)     )) ed_1000_sig
        ,abs(avg_1000_ip - lag_avg_1000_ip) / sqrt(( ( (std_1000_ip^2) / sample_size ) + ( (lag_std_1000_ip^2) / lag_sample_size)     )) ip_1000_sig
        ,abs(avg_1000_re - lag_avg_1000_re) / sqrt(( ( (std_1000_re^2) / sample_size ) + ( (lag_std_1000_re^2) / lag_sample_size)     )) re_1000_sig
        ,abs(avg_1000_mri - lag_avg_1000_mri) / sqrt(( ( (std_1000_mri^2) / sample_size ) + ( (lag_std_1000_mri^2) / lag_sample_size)     )) mri_1000_sig
        ,abs(avg_1000_ct - lag_avg_1000_ct) / sqrt(( ( (std_1000_ct^2) / sample_size ) + ( (lag_std_1000_ct^2) / lag_sample_size)     )) ct_1000_sig
        ,(sample_size + lag_sample_size) as degree_free
        from var)
        
        select
        assigned
        ,date_cat
        ,avg_tot_pmpm as 'Total_PMPM'
        ,avg_ip_pmpm as 'IP_PMPM'
        ,avg_op_pmpm as 'OP_PMPM'
        ,avg_pro_pmpm as 'Prof_PMPM'
        ,avg_oth_pmpm as 'Other_PMPM'
        
        ,avg_tot_pmpm as 'Charged_Amount_PMPM'
        ,total_amount as 'Total_Charged_Amount'
        ,member_months
        ,avg_1000_ed as 'ED_1000'
        ,per_ed_charged_amt
        ,avg_1000_ip as 'IP_1000'
        ,per_ip_charged_amt
        ,avg_1000_re as 'Read_1000'
        ,per_read_charged_amt
        ,avg_1000_mri as 'MRI_1000'
        ,per_mri_charged_amt
        ,avg_1000_ct as 'CT_1000'
        ,per_ct_charged_amt
        ---sig-----
        ,CASE WHEN tot_pmpm_sig > 3.3 then 'Highly Sig.'
        WHEN tot_pmpm_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as Tot_pmpm_sig
        
        ,CASE WHEN ip_pmpm_sig > 3.3 then 'Highly Sig.'
        WHEN ip_pmpm_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as ip_pmpm_sig
        
        ,CASE WHEN op_pmpm_sig > 3.3 then 'Highly Sig.'
        WHEN op_pmpm_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as op_pmpm_sig
        
        ,CASE WHEN pro_pmpm_sig > 3.3 then 'Highly Sig.'
        WHEN pro_pmpm_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as pro_pmpm_sig
        
        ,CASE WHEN oth_pmpm_sig > 3.3 then 'Highly Sig.'
        WHEN oth_pmpm_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as oth_pmpm_sig
        
        ,CASE WHEN ed_1000_sig > 3.3 then 'Highly Sig.'
        WHEN ed_1000_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as ed_1000_sig
        
        ,CASE WHEN ip_1000_sig > 3.3 then 'Highly Sig.'
        WHEN ip_1000_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as ip_1000_sig
        
        ,CASE WHEN re_1000_sig > 3.3 then 'Highly Sig.'
        WHEN re_1000_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as re_1000_sig
        
        ,CASE WHEN mri_1000_sig > 3.3 then 'Highly Sig.'
        WHEN mri_1000_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as mri_1000_sig
        
        ,CASE WHEN ct_1000_sig > 3.3 then 'Highly Sig.'
        WHEN ct_1000_sig >2.14 then 'Medium Sig.'
        ELSE 'No Sig.'
        End as ct_1000_sig
        
        from sig
        
        
        
        
        
        
        

